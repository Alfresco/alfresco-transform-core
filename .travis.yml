---
language: java
jdk: openjdk11
dist: xenial

git:
  depth: false
  quiet: true

services:
  - docker

cache:
  directories:
    - ${HOME}/.m2/repository
    - ${HOME}/artifacts

branches:
  only:
    - master
    - /^SP\/.+$/
    - /^HF\/.+$/
    - company_release
    - /^ATS-.*$/
    - POC-Parallel-travis-builds

stages:
  - build and test
  - release
  - company_release

before_install: bash _ci/init.sh

jobs:
  include:
    - stage: Build and Test
      name: "ImageMagick"
      if: branch NOT IN (company_release)
      before_script: travis_wait bash _ci/cache_artifacts.sh
      install: _ci/build.sh imagemagick
      script: bash _ci/test.sh imagemagick
    - name: "LibreOffice"
      if: branch NOT IN (company_release)
      before_script: travis_wait bash _ci/cache_artifacts.sh
      install: _ci/build.sh libreoffice
      script: bash _ci/test.sh libreoffice
    - name: "Transform Misc"
      if: branch NOT IN (company_release)
      before_script: travis_wait bash _ci/cache_artifacts.sh
      install: _ci/build.sh misc
      script: bash _ci/test.sh misc
    - name: "PDF Renderer"
      if: branch NOT IN (company_release)
      before_script: travis_wait bash _ci/cache_artifacts.sh
      install: _ci/build.sh pdf-renderer
      script: bash _ci/test.sh pdf-renderer
    - name: "Tika"
      if: branch NOT IN (company_release)
      before_script: travis_wait bash _ci/cache_artifacts.sh
      install: _ci/build.sh tika
      script: bash _ci/test.sh tika
    - name: "All in One Transfomer"
      if: branch NOT IN (company_release)
      before_script: travis_wait bash _ci/cache_artifacts.sh
      install: _ci/build.sh full-build
      script: bash _ci/test.sh aio-test
    - name: "WhiteSource"
      if: branch NOT IN (POC-Parallel-travis-builds)
      script: bash _ci/whitesource.sh
    - name: "Source Clear Scan (SCA)"
      if: branch NOT IN (POC-Parallel-travis-builds)
      install: skip
      script: travis_wait 30 bash _ci/sourceclear.sh
    - name: "Static Analysis (SAST)"
      stage: build
## TODO ATS-721: comment out until it is possible to run concurrent SAST scans
#     if: branch NOT IN (company_release) AND type != pull_request
      if: branch NOT IN (POC-Parallel-travis-builds) AND type != pull_request
      before_install:
      - bash _ci/static_analysis_init.sh
      - bash _ci/init.sh
      script: bash _ci/static_analysis.sh

    - name: "Release"
      stage: release
      if: commit_message ~= /\[trigger release\]/ AND branch ~= /^(master|SP\/.+|HF\/.+|POC-Parallel-travis-builds)$/
      before_script: travis_wait bash _ci/cache_artifacts.sh
      script: travis_wait 55 bash _ci/release.sh
      before_deploy: source _ci/prepare_staging_deploy.sh
      deploy:
        provider: s3
        access_key_id: "${STAGING_AWS_ACCESS_KEY}"
        secret_access_key: "${STAGING_AWS_SECRET_KEY}"
        bucket: "alfresco-artefacts-staging"
        skip_cleanup: true
        region: "eu-west-1"
        local_dir: "deploy_dir"
        upload-dir: "enterprise/AlfrescoTransformServices/TransformEngines/${VERSION}"
        on:
          all_branches: true

    - name: "Company Release"
      stage: company_release
      if: branch = company_release
      before_install: bash _ci/init.sh
      install: echo "NoOp"
      script: echo "NoOp"
      before_deploy: source _ci/prepare_release_deploy.sh
      deploy:
        provider: s3
        access_key_id: "${RELEASE_AWS_ACCESS_KEY}"
        secret_access_key: "${RELEASE_AWS_SECRET_KEY}"
        bucket: "eu.dl.alfresco.com"
        skip_cleanup: true
        region: "eu-west-1"
        local_dir: "deploy_dir"
        upload-dir: "release/enterprise/AlfrescoTransformServices/TransformEngines/${VERSION}"
        on:
          branch: company_release
